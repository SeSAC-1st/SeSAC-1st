<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>문서</title>
    <%- include('../include/head.ejs') %>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
  </head>
  <body>
    <%- include('../include/header.ejs') %>
    <main class="px-4 sm:px-6 lg:px-52 pt-20 dark:bg-gray-900">
      <div class="flex flex-col items-center">
        <h1 class="text-xl font-bold mb-4"><%= user.userName %></h1>
        <img
          id="profileImg"
          src="<%= user.profileImg && user.profileImg.trim() !== '' ? `/uploads/${user.profileImg}` : '/uploads/user.png' %>"
          alt="프로필 이미지"
          class="w-32 h-32 rounded-full mb-4"
        />
        <form onsubmit="handleFormSubmit(event)" class="w-full max-w-md">
          <div
            id="error-message"
            class="text-red-500 mb-4"
            style="display: none"
          ></div>
          <div class="mb-4">
            <label
              for="thumbnail"
              class="block text-gray-700 dark:text-gray-200"
              >프로필 이미지</label
            >
            <input
              type="file"
              name="thumbnail"
              id="thumbnail"
              class="mt-1 block w-full"
              onchange="previewImage();"
            />
          </div>
          <div class="mb-4">
            <label for="userNick" class="block text-gray-700 dark:text-gray-200"
              >닉네임</label
            >
            <input
              type="text"
              id="userNick"
              class="mt-1 block w-full"
              placeholder="닉네임을 입력하세요"
              value="<%= user.userNick %>"
            />
          </div>
          <div class="mb-4">
            <label for="email" class="block text-gray-700 dark:text-gray-200"
              >이메일</label
            >
            <input
              type="text"
              id="email"
              class="mt-1 block w-full"
              placeholder="이메일을 입력하세요"
              value="<%= user.email %>"
            />
          </div>
          <div class="mb-4">
            <label for="address" class="block text-gray-700 dark:text-gray-200"
              >주소</label
            >
            <input
              type="text"
              id="address"
              class="mt-1 block w-full"
              placeholder="주소를 입력하세요"
              value="<%= user.address %>"
            />
          </div>
          <div class="mb-4">
            <label for="birthday" class="block text-gray-700 dark:text-gray-200"
              >생일</label
            >
            <input
              type="date"
              id="birthday"
              class="mt-1 block w-full"
              placeholder="생일을 입력하세요"
              value="<%= user.birthday %>"
              max=""
            />
          </div>
          <button
            type="submit"
            class="w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-700"
          >
            수정
          </button>
          <button
            type="button"
            onclick="resetProfileImage()"
            class="w-full bg-red-500 text-white py-2 rounded hover:bg-red-700 mt-4"
          >
            프로필 초기화
          </button>
        </form>
      </div>
    </main>
    <%- include('../include/footer.ejs') %>

    <script>
      let isImageReset = false; // 초기화 상태를 추적하는 플래그

      // 생일 필드는 현재 날짜 이후 선택할 수 없도록 설정
      const nowUtc = Date.now();
      const timeOff = new Date().getTimezoneOffset() * 60000;
      const today = new Date(nowUtc - timeOff).toISOString().split("T")[0];
      document.getElementById("birthday").setAttribute("max", today);

      const allowedExtensions = ['image/png', 'image/jpeg', 'image/jpg'];

      function previewImage() {
        const fileInput = document.querySelector("#thumbnail");
        const file = fileInput.files[0];
        const reader = new FileReader();

        reader.onloadend = function () {
          document.querySelector("#profileImg").src = reader.result;
        };

        if (file) {
          if (allowedExtensions.includes(file.type)) {
            reader.readAsDataURL(file);
            isImageReset = false; // 이미지 초기화 상태 초기화
            document.getElementById("error-message").style.display = "none"; // 오류 메시지 숨기기
          } else {
            displayErrorMessage('잘못된 파일 형식입니다. .png, .jpeg, .jpg 파일만 허용됩니다.');
            fileInput.value = ""; // 파일 입력 필드 초기화
            resetImage(); // 기본 이미지로 재설정
            isImageReset = true; // 이미지 초기화 상태 설정
          }
        } else {
          // 파일이 선택되지 않은 경우 오류 메시지를 숨깁니다.
          document.getElementById("error-message").style.display = "none";
        }
      }


      function resetImage() {
        const defaultImageUrl = "/uploads/user.png";
        document.querySelector("#profileImg").src = defaultImageUrl;
      }

      function displayErrorMessage(message) {
        const errorMessageElement = document.getElementById("error-message");
        errorMessageElement.textContent = message;
        errorMessageElement.style.display = "block";
      }

      async function handleFormSubmit(event) {
        event.preventDefault(); // 새로고침 방지
        const user = <%- JSON.stringify(user) %>;

        // 이미지를 초기화한 경우, 빈 문자열을 설정합니다.
        if (isImageReset) {
          document.querySelector("#thumbnail").value = ""; // 파일 입력 필드 초기화
        }

        await updateUser(user);
      }

      // 회원 정보 수정
      async function updateUser(user) {
        const formData = new FormData();
        const fileInput = document.querySelector("#thumbnail");
        const userNick = document.querySelector("#userNick").value;
        const email = document.querySelector("#email").value;
        const address = document.querySelector("#address").value;
        const birthday = document.querySelector("#birthday").value;

        if (fileInput.files.length > 0 && !isImageReset) {
          const file = fileInput.files[0];
          if (allowedExtensions.includes(file.type)) {
            formData.append("profileImg", file);
          } else {
            return; // 잘못된 파일 형식일 경우 전송하지 않음
          }
        } else if (isImageReset) {
          formData.append("profileImg", "user.png"); // 기본 이미지로 설정
        } else {
          formData.append("profileImg", ""); // 빈 문자열을 보내서 서버가 기존 이미지를 유지하도록 함
        }

        formData.append("userNick", userNick);
        formData.append("email", email);
        formData.append("address", address);
        formData.append("birthday", birthday);

        try {
          const res = await axios({
            method: "PATCH",
            url: `/user/${user.userId}`,
            data: formData,
            headers: {
              "Content-Type": "multipart/form-data",
            },
          });

          const updatedUser = res.data.updatedUser;
          if (updatedUser.profileImg) {
            document.querySelector("#profileImg").src = `/uploads/${updatedUser.profileImg}`;
          }
          alert('수정이 완료되었습니다.');
        } catch (error) {
          console.error(error);
          displayErrorMessage(error.response.data.message || '.png, .jpeg, .jpg 확장자만 업로드가 가능합니다.');
        }

        // 파일 입력 필드 초기화
        document.getElementById("thumbnail").value = ""; // 파일 입력 필드 초기화
      }

      function resetProfileImage() {
        isImageReset = true; // 이미지 초기화 상태 설정
        resetImage();
      }
    </script>
  </body>
</html>
